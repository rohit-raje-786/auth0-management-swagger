openapi: 3.0.0
info:
  title: Auth0 Management API
  version: 1.0.0
servers:
- url: https://reunion-dev.us.auth0.com
tags:
- name: Blacklists
  description: Blacklists
- name: Client Grants
  description: Client Grants
- name: Clients
  description: Clients
- name: Connections
  description: Connections
- name: Device Credentials
  description: Device Credentials
- name: Emails
  description: Emails
- name: Guardian
  description: Guardian
- name: Jobs
  description: Jobs
- name: Logs
  description: Logs
- name: Resource Servers
  description: Resource Servers
- name: Rules
  description: Rules
- name: Stats
  description: Stats
- name: Tenants
  description: Tenants
- name: Tickets
  description: Tickets
- name: User Blocks
  description: User Blocks
- name: Users
  description: Users
- name: Users By Email
paths:
  /api/v2/blacklists/tokens:
    get:
      tags:
      - Blacklists
      summary: Get all blacklisted tokens
      description: Retrieves the <code>jti</code> and <code>aud</code> of all tokens
        in the blacklist.
      operationId: apiV2BlacklistsTokensGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Blacklists
    post:
      tags:
      - Blacklists
      summary: Blacklist a token
      description: Adds the token identified by the <code>jti</code> to a blacklist
        for the tenant.
      operationId: apiV2BlacklistsTokensPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"aud\\\": \\\"\\\",\\r\\n  \\\"jti\\\": \\\"\
                \\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Blacklists
  /api/v2/client-grants:
    get:
      tags:
      - Client Grants
      summary: Get all client grants
      operationId: apiV2Client_grantsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: ClientGrants
    post:
      tags:
      - Client Grants
      summary: Create a client grant
      operationId: apiV2Client_grantsPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"client_id\\\": \\\"\\\",\\r\\n  \\\"audience\\\
                \": \\\"\\\",\\r\\n  \\\"scope\\\": [\\r\\n    \\\"\\\"\\r\\n  ]\\\
                r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: ClientGrants
  /api/v2/client-grants/{id}:
    delete:
      tags:
      - Client Grants
      summary: Delete a client grant
      operationId: apiV2Client_grantsIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: ClientGrants
    patch:
      tags:
      - Client Grants
      summary: Update a client grant
      operationId: apiV2Client_grantsIdPATCH
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"scope\\\": [\\r\\n    \\\"\\\"\\r\\n  ]\\r\\\
                n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: ClientGrants
  /api/v2/clients:
    get:
      tags:
      - Clients
      summary: Get all clients
      description: Retrieves a list of all client applications. Accepts a list of
        fields to include or exclude.<br/><strong>Important:</strong> The <code>client_secret</code>
        and <code>encryption_key</code> attributes can only be retrieved with the
        <code>read:client_keys</code> scope.
      operationId: apiV2ClientsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Clients
    post:
      tags:
      - Clients
      summary: Create a client
      description: Creates a new client application. The samples on the right show
        every attribute that can be used.
      operationId: apiV2ClientsPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"name\\\": \\\"\\\",\\r\\n  \\\"client_secret\\\
                \": \\\"\\\",\\r\\n  \\\"logo_uri\\\": \\\"\\\",\\r\\n  \\\"callbacks\\\
                \": [\\r\\n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"allowed_origins\\\":\
                \ [\\r\\n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"client_aliases\\\": [\\\
                r\\n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"allowed_clients\\\": [\\r\\\
                n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"allowed_logout_urls\\\": [\\r\\\
                n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"token_endpoint_auth_method\\\"\
                : \\\"\\\",\\r\\n  \\\"app_type\\\": \\\"\\\",\\r\\n  \\\"is_first_party\\\
                \": true,\\r\\n  \\\"jwt_configuration\\\": {\\r\\n    \\\"lifetime_in_seconds\\\
                \": 0,\\r\\n    \\\"secret_encoded\\\": true,\\r\\n    \\\"scopes\\\
                \": {},\\r\\n    \\\"alg\\\": \\\"\\\"\\r\\n  },\\r\\n  \\\"encryption_key\\\
                \": {\\r\\n    \\\"pub\\\": \\\"\\\",\\r\\n    \\\"cert\\\": \\\"\\\
                \"\\r\\n  },\\r\\n  \\\"sso\\\": true,\\r\\n  \\\"custom_login_page_on\\\
                \": true,\\r\\n  \\\"custom_login_page\\\": \\\"\\\",\\r\\n  \\\"\
                custom_login_page_preview\\\": \\\"\\\",\\r\\n  \\\"form_template\\\
                \": \\\"\\\",\\r\\n  \\\"is_heroku_app\\\": true,\\r\\n  \\\"addons\\\
                \": {\\r\\n    \\\"aws\\\": {},\\r\\n    \\\"azure_blob\\\": {},\\\
                r\\n    \\\"azure_sb\\\": {},\\r\\n    \\\"rms\\\": {},\\r\\n    \\\
                \"mscrm\\\": {},\\r\\n    \\\"slack\\\": {},\\r\\n    \\\"box\\\"\
                : {},\\r\\n    \\\"cloudbees\\\": {},\\r\\n    \\\"concur\\\": {},\\\
                r\\n    \\\"dropbox\\\": {},\\r\\n    \\\"echosign\\\": {},\\r\\n\
                \    \\\"egnyte\\\": {},\\r\\n    \\\"firebase\\\": {},\\r\\n    \\\
                \"newrelic\\\": {},\\r\\n    \\\"office365\\\": {},\\r\\n    \\\"\
                salesforce\\\": {},\\r\\n    \\\"salesforce_api\\\": {},\\r\\n   \
                \ \\\"salesforce_sandbox_api\\\": {},\\r\\n    \\\"samlp\\\": {},\\\
                r\\n    \\\"layer\\\": {},\\r\\n    \\\"sap_api\\\": {},\\r\\n   \
                \ \\\"sharepoint\\\": {},\\r\\n    \\\"springcm\\\": {},\\r\\n   \
                \ \\\"wams\\\": {},\\r\\n    \\\"wsfed\\\": {},\\r\\n    \\\"zendesk\\\
                \": {},\\r\\n    \\\"zoom\\\": {}\\r\\n  },\\r\\n  \\\"resource_servers\\\
                \": [\\r\\n    {\\r\\n      \\\"identifier\\\": \\\"\\\",\\r\\n  \
                \    \\\"scopes\\\": [\\r\\n        \\\"\\\"\\r\\n      ]\\r\\n  \
                \  }\\r\\n  ],\\r\\n  \\\"client_metadata\\\": {},\\r\\n  \\\"mobile\\\
                \": {\\r\\n    \\\"android\\\": {},\\r\\n    \\\"ios\\\": {}\\r\\\
                n  }\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Clients
  /api/v2/clients/{id}:
    get:
      tags:
      - Clients
      summary: Get a client
      description: "Retrieves a client by its id.<br/><strong>Important:</strong>\
        \ The <code>client_secret</code>,<code>encryption_key</code> and <code>signing_keys</code>\
        \ attributes can only be retrieved with the <code>read:client_keys</code>\
        \ scope."
      operationId: apiV2ClientsIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Clients
    delete:
      tags:
      - Clients
      summary: Delete a client
      description: "Deletes a client and all its related assets (like rules, connections,\
        \ etc) given its id."
      operationId: apiV2ClientsIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Clients
    patch:
      tags:
      - Clients
      summary: Update a client
      description: <strong>Important:</strong> The <code>client_secret</code> and
        <code>encryption_key</code> attributes can only be updated with the <code>update:client_keys</code>
        scope.
      operationId: apiV2ClientsIdPATCH
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"name\\\": \\\"\\\",\\r\\n  \\\"client_secret\\\
                \": \\\"\\\",\\r\\n  \\\"logo_uri\\\": \\\"\\\",\\r\\n  \\\"callbacks\\\
                \": [\\r\\n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"allowed_origins\\\":\
                \ [\\r\\n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"client_aliases\\\": [\\\
                r\\n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"allowed_clients\\\": [\\r\\\
                n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"allowed_logout_urls\\\": [\\r\\\
                n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"jwt_configuration\\\": {\\r\\n\
                \    \\\"lifetime_in_seconds\\\": 0,\\r\\n    \\\"secret_encoded\\\
                \": true,\\r\\n    \\\"scopes\\\": {},\\r\\n    \\\"alg\\\": \\\"\\\
                \"\\r\\n  },\\r\\n  \\\"encryption_key\\\": {\\r\\n    \\\"pub\\\"\
                : \\\"\\\",\\r\\n    \\\"cert\\\": \\\"\\\",\\r\\n    \\\"subject\\\
                \": \\\"\\\"\\r\\n  },\\r\\n  \\\"sso\\\": true,\\r\\n  \\\"custom_login_page_on\\\
                \": true,\\r\\n  \\\"token_endpoint_auth_method\\\": \\\"\\\",\\r\\\
                n  \\\"app_type\\\": \\\"\\\",\\r\\n  \\\"is_first_party\\\": true,\\\
                r\\n  \\\"custom_login_page\\\": \\\"\\\",\\r\\n  \\\"custom_login_page_preview\\\
                \": \\\"\\\",\\r\\n  \\\"form_template\\\": \\\"\\\",\\r\\n  \\\"\
                addons\\\": {\\r\\n    \\\"aws\\\": {},\\r\\n    \\\"azure_blob\\\"\
                : {},\\r\\n    \\\"azure_sb\\\": {},\\r\\n    \\\"rms\\\": {},\\r\\\
                n    \\\"mscrm\\\": {},\\r\\n    \\\"slack\\\": {},\\r\\n    \\\"\
                box\\\": {},\\r\\n    \\\"cloudbees\\\": {},\\r\\n    \\\"concur\\\
                \": {},\\r\\n    \\\"dropbox\\\": {},\\r\\n    \\\"echosign\\\": {},\\\
                r\\n    \\\"egnyte\\\": {},\\r\\n    \\\"firebase\\\": {},\\r\\n \
                \   \\\"newrelic\\\": {},\\r\\n    \\\"office365\\\": {},\\r\\n  \
                \  \\\"salesforce\\\": {},\\r\\n    \\\"salesforce_api\\\": {},\\\
                r\\n    \\\"salesforce_sandbox_api\\\": {},\\r\\n    \\\"samlp\\\"\
                : {},\\r\\n    \\\"layer\\\": {},\\r\\n    \\\"sap_api\\\": {},\\\
                r\\n    \\\"sharepoint\\\": {},\\r\\n    \\\"springcm\\\": {},\\r\\\
                n    \\\"wams\\\": {},\\r\\n    \\\"wsfed\\\": {},\\r\\n    \\\"zendesk\\\
                \": {},\\r\\n    \\\"zoom\\\": {}\\r\\n  },\\r\\n  \\\"resource_servers\\\
                \": [\\r\\n    {\\r\\n      \\\"identifier\\\": \\\"\\\",\\r\\n  \
                \    \\\"scopes\\\": [\\r\\n        \\\"\\\"\\r\\n      ]\\r\\n  \
                \  }\\r\\n  ],\\r\\n  \\\"client_metadata\\\": {},\\r\\n  \\\"mobile\\\
                \": {\\r\\n    \\\"android\\\": {},\\r\\n    \\\"ios\\\": {}\\r\\\
                n  }\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Clients
  /api/v2/connections:
    get:
      tags:
      - Connections
      summary: Get all connections
      description: Retrieves every connection matching the specified strategy. All
        connections are retrieved if no strategy is being specified. Accepts a list
        of fields to include or exclude in the resulting list of connection objects.
      operationId: apiV2ConnectionsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Connections
    post:
      tags:
      - Connections
      summary: Create a connection
      description: "Creates a new connection according to the JSON object received\
        \ in <code>body</code>.<br/> The samples on the right show all available attributes.\
        \ Mandatory attributes are <code>name</code> and <code>strategy</code>.<br/>\
        \ Valid Strategy names are: <code>ad</code>, <code>adfs</code>, <code>amazon</code>,\
        \ <code>dropbox</code>, <code>bitbucket</code>, <code>aol</code>, <code>auth0-adldap</code>,\
        \ <code>auth0-oidc</code>, <code>auth0</code>, <code>baidu</code>, <code>bitly</code>,\
        \ <code>box</code>, <code>custom</code>, <code>dwolla</code>, <code>email</code>,\
        \ <code>evernote-sandbox</code>, <code>evernote</code>, <code>exact</code>,\
        \ <code>facebook</code>, <code>fitbit</code>, <code>flickr</code>, <code>github</code>,\
        \ <code>google-apps</code>, <code>google-oauth2</code>, <code>google-openid</code>,\
        \ <code>instagram</code>, <code>ip</code>, <code>linkedin</code>, <code>miicard</code>,\
        \ <code>oauth1</code>, <code>oauth2</code>, <code>office365</code>, <code>paypal</code>,\
        \ <code>pingfederate</code>, <code>planningcenter</code>, <code>renren</code>,\
        \ <code>salesforce-community</code>, <code>salesforce-sandbox</code>, <code>salesforce</code>,\
        \ <code>samlp</code>, <code>sharepoint</code>, <code>shopify</code>, <code>sms</code>,\
        \ <code>soundcloud</code>, <code>thecity-sandbox</code>, <code>thecity</code>,\
        \ <code>thirtysevensignals</code>, <code>twitter</code>, <code>untappd</code>,\
        \ <code>vkontakte</code>, <code>waad</code>, <code>weibo</code>, <code>windowslive</code>,\
        \ <code>wordpress</code>, <code>yahoo</code>, <code>yammer</code>, <code>yandex</code>"
      operationId: apiV2ConnectionsPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"name\\\": \\\"\\\",\\r\\n  \\\"strategy\\\"\
                : \\\"\\\",\\r\\n  \\\"options\\\": {\\r\\n    \\\"validation\\\"\
                : {},\\r\\n    \\\"passwordPolicy\\\": \\\"\\\",\\r\\n    \\\"password_history\\\
                \": {},\\r\\n    \\\"password_no_personal_info\\\": {},\\r\\n    \\\
                \"password_dictionary\\\": {}\\r\\n  },\\r\\n  \\\"enabled_clients\\\
                \": [\\r\\n    \\\"\\\"\\r\\n  ]\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Connections
  /api/v2/connections/{id}:
    get:
      tags:
      - Connections
      summary: Get a connection
      description: Retrieves a connection by its <code>id</code>.
      operationId: apiV2ConnectionsIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Connections
    delete:
      tags:
      - Connections
      summary: Delete a connection
      description: Deletes a connection and all its users.
      operationId: apiV2ConnectionsIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Connections
    patch:
      tags:
      - Connections
      summary: Update a connection
      description: "Note: if you use the options parameter, the whole options object\
        \ will be overridden, ensure all parameters are present"
      operationId: apiV2ConnectionsIdPATCH
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"options\\\": {\\r\\n    \\\"validation\\\"\
                : {},\\r\\n    \\\"passwordPolicy\\\": \\\"\\\",\\r\\n    \\\"password_history\\\
                \": {},\\r\\n    \\\"password_no_personal_info\\\": {},\\r\\n    \\\
                \"password_dictionary\\\": {}\\r\\n  },\\r\\n  \\\"enabled_clients\\\
                \": [\\r\\n    \\\"\\\"\\r\\n  ]\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Connections
  /api/v2/connections/{id}/users:
    delete:
      tags:
      - Connections
      summary: Delete a connection user
      description: Deletes a specified connection user by its email (currently only
        database connections are supported and you cannot delete all users from specific
        connection).
      operationId: apiV2ConnectionsIdUsersDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Connections
  /api/v2/device-credentials:
    get:
      tags:
      - Device Credentials
      summary: List device credentials
      description: |
        You can use the device-credentials endpoint using Basic authentication with username and password from a database connection<br />The Authorization header should be <code>Authorization: Basic base64("{db_conn_name}\{user}:{password}")</code>
      operationId: apiV2Device_credentialsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: DeviceCredentials
    post:
      tags:
      - Device Credentials
      summary: Create a device public key
      description: |
        You can use the device-credentials endpoint using Basic authentication with username and password from a database connection<br />The Authorization header should be <code>Authorization: Basic base64("{db_conn_name}\{user}:{password}")</code>
      operationId: apiV2Device_credentialsPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"device_name\\\": \\\"\\\",\\r\\n  \\\"type\\\
                \": \\\"\\\",\\r\\n  \\\"value\\\": \\\"\\\",\\r\\n  \\\"device_id\\\
                \": \\\"\\\",\\r\\n  \\\"client_id\\\": \\\"\\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: DeviceCredentials
  /api/v2/device-credentials/{id}:
    delete:
      tags:
      - Device Credentials
      summary: Delete a device credential
      description: |
        You can use the device-credentials endpoint using Basic authentication with username and password from a database connection<br />The Authorization header should be <code>Authorization: Basic base64("{db_conn_name}\{user}:{password}")</code>
      operationId: apiV2Device_credentialsIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: DeviceCredentials
  /api/v2/emails/provider:
    get:
      tags:
      - Emails
      summary: Get the email provider
      operationId: apiV2EmailsProviderGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Emails
    post:
      tags:
      - Emails
      summary: Configure the email provider
      operationId: apiV2EmailsProviderPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"name\\\": \\\"\\\",\\r\\n  \\\"enabled\\\"\
                : true,\\r\\n  \\\"default_from_address\\\": \\\"\\\",\\r\\n  \\\"\
                credentials\\\": {\\r\\n    \\\"api_key\\\": \\\"\\\"\\r\\n  },\\\
                r\\n  \\\"settings\\\": {}\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Emails
    delete:
      tags:
      - Emails
      summary: Delete the email provider
      description: <strong>USE WITH CAUTION</strong>
      operationId: apiV2EmailsProviderDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Emails
    patch:
      tags:
      - Emails
      summary: Update the email provider
      operationId: apiV2EmailsProviderPATCH
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"name\\\": \\\"\\\",\\r\\n  \\\"enabled\\\"\
                : true,\\r\\n  \\\"default_from_address\\\": \\\"\\\",\\r\\n  \\\"\
                credentials\\\": {\\r\\n    \\\"api_key\\\": \\\"\\\"\\r\\n  },\\\
                r\\n  \\\"settings\\\": {}\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Emails
  /api/v2/guardian/factors:
    get:
      tags:
      - Guardian
      summary: Get a list of factors and statuses
      description: Retrieves all factors. Useful to check factor enablement and trial
        status.
      operationId: apiV2GuardianFactorsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Guardian
  /api/v2/guardian/enrollments/{id}:
    get:
      tags:
      - Guardian
      summary: Get a Guardian enrollment
      description: Retrieves an enrollment. Useful to check its type and related metadata.
      operationId: apiV2GuardianEnrollmentsIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Guardian
    delete:
      tags:
      - Guardian
      summary: Delete a Guardian enrollment
      description: Deletes an enrollment. Useful when you want to force re-enroll.
      operationId: apiV2GuardianEnrollmentsIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Guardian
  /api/v2/guardian/factors/sms/templates:
    get:
      tags:
      - Guardian
      summary: Get enrollment and verification templates
      description: Retrieve both templates. Useful to check if a different template
        than default were set.
      operationId: apiV2GuardianFactorsSmsTemplatesGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Guardian
    put:
      tags:
      - Guardian
      summary: Update enrollment and verification SMS templates.
      description: Useful to send custom messages on sms enrollment and verification
      operationId: apiV2GuardianFactorsSmsTemplatesPUT
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"enrollment_message\\\": \\\"\\\",\\r\\n  \\\
                \"verification_message\\\": \\\"\\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Guardian
  /api/v2/guardian/factors/{factor_name}/providers/{name}:
    get:
      tags:
      - Guardian
      summary: Get Guardian factor provider
      description: Returns provider configuration
      operationId: apiV2GuardianFactorsFactor_nameProvidersNameGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: factor_name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Guardian
  /api/v2/guardian/factors/{name}:
    put:
      tags:
      - Guardian
      summary: Update Guardian Factor
      description: Useful to enable / disable factor
      operationId: apiV2GuardianFactorsNamePUT
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: name
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"enabled\\\": true\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Guardian
  /api/v2/guardian/factors/sms/providers/twilio:
    put:
      tags:
      - Guardian
      summary: Update Guardian's Twilio SMS factor provider
      description: Useful to configure SMS provider
      operationId: apiV2GuardianFactorsSmsProvidersTwilioPUT
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"from\\\": \\\"\\\",\\r\\n  \\\"messaging_service_sid\\\
                \": \\\"\\\",\\r\\n  \\\"auth_token\\\": \\\"\\\",\\r\\n  \\\"sid\\\
                \": \\\"\\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Guardian
  /api/v2/jobs/{id}:
    get:
      tags:
      - Jobs
      summary: Get a job
      description: Retrieves a job. Useful to check its status.
      operationId: apiV2JobsIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Jobs
  /api/v2/jobs/{id}/errors:
    get:
      tags:
      - Jobs
      summary: Get failed job error details
      operationId: apiV2JobsIdErrorsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Jobs
  /api/v2/jobs/users-imports:
    post:
      tags:
      - Jobs
      summary: Import users
      description: Imports users to a connection from a file using a long running
        job. <strong>Important:</strong> The documentation for the file format is
        <a href=https://docs.auth0.com/bulk-import>here</a>.
      operationId: apiV2JobsUsers_importsPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Jobs
  /api/v2/jobs/verification-email:
    post:
      tags:
      - Jobs
      summary: Send a "verify email address" email
      description: Send an email to the specified user that asks them to click a link
        to verify their email address.
      operationId: apiV2JobsVerification_emailPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"user_id\\\": \\\"\\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Jobs
  /api/v2/logs:
    get:
      tags:
      - Logs
      summary: Search log events
      description: |-
        Retrieves log entries that match the specified search criteria (or list all entries if no criteria is used).<br/>You can search with a criteria using the <code>q</code> parameter or you can search by a specific log ID (search by checkpoint):<br/><br/><h5>The search by criteria can use the following parameters:</h5><ul><li><b>q:</b> Search Criteria using <a href="https://auth0.com/docs/api/management/v2/query-string-syntax">Query String Syntax</a></li><li><b>page:</b> The page number. Zero based</li><li><b>per_page:</b> The amount of entries per page</li><li><b>sort:</b> The field to use for sorting. Use <code>field:order</code>, where order is <code>1</code> for ascending and <code>-1</code> for descending. For example <code>date:-1</code></li><li><b>fields:</b> A comma separated list of fields to include or exclude (depending on include_fields) from the result, empty to retrieve all fields</li><li><b>include_fields:</b> <code>true</code> if the fields specified are to be included in the result, <code>false</code> otherwise. Defaults to <code>true</code></li><li><b>include_totals:</b> <code>true</code> if a query summary must be included in the result, false otherwise. Default <code>false</code>.</li></ul><h5>The search by checkpoint use the following parameters:</h5><ul><li><b>from:</b> Log Event Id to start retrieving logs. You can limit the amount of logs using the <code>take</code> parameter.</li><li><b>take:</b> The total amount of entries to retrieve when using the <code>from</code> parameter.</li></ul>
        <h5>Event acronym mapping</h5><ul><li>s: Success Login </li><li>seacft: Success Exchange (Authorization Code for Access Token)</li><li>feacft: Failed Exchange (Authorization Code for Access Token)</li><li>seccft: Success Exchange (Client Credentials for Access Token)</li><li>feccft: Failed Exchange (Client Credentials for Access Token)</li><li>f: Failed Login </li><li>w: Warnings During Login </li><li>du: Deleted User </li><li>fu: Failed Login (invalid email/username) </li><li>fp: Failed Login (wrong password) </li><li>fc: Failed by Connector </li><li>fco: Failed by CORS </li><li>con: Connector Online </li><li>coff: Connector Offline </li><li>fcpro: Failed Connector Provisioning </li><li>ss: Success Signup </li><li>fs: Failed Signup </li><li>cs: Code Sent </li><li>cls: Code/Link Sent </li><li>sv: Success Verification Email </li><li>fv: Failed Verification Email </li><li>scp: Success Change Password </li><li>fcp: Failed Change Password </li><li>sce: Success Change Email </li><li>fce: Failed Change Email </li><li>scu: Success Change Username </li><li>fcu: Failed Change Username </li><li>scpn: Success Change Phone Number </li><li>fcpn: Failed Change Phone Number </li><li>svr: Success Verification Email Request </li><li>fvr: Failed Verification Email Request </li><li>scpr: Success Change Password Request </li><li>fcpr: Failed Change Password Request </li><li>fn: Failed Sending Notification </li><li>sapi: API Operation </li><li>fapi: Failed API Operation </li><li>limit_wc: Blocked Account </li><li>limit_mu: Blocked IP Address </li><li>limit_ui: Too Many Calls to /userinfo </li><li>api_limit: Rate Limit On API </li><li>sdu: Successful User Deletion </li><li>fdu: Failed User Deletion </li><li>slo: Success Logout</li><li>flo: Failed Logout</li><li>sd: Success Delegation</li><li>fd: Failed Delegation</li></ul>
        <h5>List of fields that can be used in fields and sort</h5><ul><li>date: The moment when the event occured.</li><li>connection: The connection related to the event.</li><li>client_id: The client id related to the event</li><li>client_name: The name of the client related to the event.</li><li>ip: The IP address from where the request that caused the log entry originated.</li><li>user_id: The user id related to the event.</li><li>user_name: The user name related to the event.</li><li>description: The description of the event.</li><li>user_agent: The user agent that is related to the event.</li><li>type: The event type. Refer to the event acronym mappings above for a list of possible event types.</li><li>details: The details object of the event.</li><li>strategy: The connection strategy related to the event.</li><li>strategy_type: The connection strategy type related to the event.</li></ul>
      operationId: apiV2LogsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Logs
  /api/v2/logs/{id}:
    get:
      tags:
      - Logs
      summary: Get a log event by id
      description: Retrieves the data related to the log entry identified by id. This
        returns a single log entry representation as specified in the schema.
      operationId: apiV2LogsIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Logs
  /api/v2/resource-servers/{id}:
    get:
      tags:
      - Resource Servers
      summary: Get a resource server by its id
      operationId: apiV2Resource_serversIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: ResourceServers
    delete:
      tags:
      - Resource Servers
      summary: Delete a resource server
      operationId: apiV2Resource_serversIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: ResourceServers
    patch:
      tags:
      - Resource Servers
      summary: Update a resource server
      operationId: apiV2Resource_serversIdPATCH
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"name\\\": \\\"\\\",\\r\\n  \\\"scopes\\\":\
                \ [\\r\\n    {\\r\\n      \\\"value\\\": \\\"\\\",\\r\\n      \\\"\
                description\\\": \\\"\\\"\\r\\n    }\\r\\n  ],\\r\\n  \\\"signing_alg\\\
                \": \\\"\\\",\\r\\n  \\\"signing_secret\\\": \\\"\\\",\\r\\n  \\\"\
                token_lifetime\\\": 0\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: ResourceServers
  /api/v2/resource-servers:
    post:
      tags:
      - Resource Servers
      summary: Create a resource server
      operationId: apiV2Resource_serversPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"name\\\": \\\"\\\",\\r\\n  \\\"identifier\\\
                \": \\\"\\\",\\r\\n  \\\"scopes\\\": [\\r\\n    {\\r\\n      \\\"\
                value\\\": \\\"\\\",\\r\\n      \\\"description\\\": \\\"\\\"\\r\\\
                n    }\\r\\n  ],\\r\\n  \\\"signing_alg\\\": \\\"\\\",\\r\\n  \\\"\
                signing_secret\\\": \\\"\\\",\\r\\n  \\\"token_lifetime\\\": 0\\r\\\
                n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: ResourceServers
  /api/v2/rules:
    get:
      tags:
      - Rules
      summary: Get all rules
      description: "Retrieves a list of all rules. Accepts a list of fields to include\
        \ or exclude.<br/> The <code>enabled</code> parameter can be specified to\
        \ get enabled or disabled rules. The rule's stage of executing could be set\
        \ to the following values <code>login_success</code>, <code>login_failure</code>\
        \ or <code>pre_authorize</code>"
      operationId: apiV2RulesGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Rules
    post:
      tags:
      - Rules
      summary: Create a rule
      description: "Creates a new rule according to the JSON object received in <code>body</code>.<br/>The\
        \ samples on the right show you every attribute that could be used. Mandatory\
        \ attributes are <code>name</code> and <code>script</code>Note: Changing a\
        \ rule's stage of execution from the default <code>login_success</code> can\
        \ change the rule's function signature to have user omitted."
      operationId: apiV2RulesPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"name\\\": \\\"\\\",\\r\\n  \\\"script\\\":\
                \ \\\"\\\",\\r\\n  \\\"order\\\": {},\\r\\n  \\\"enabled\\\": true,\\\
                r\\n  \\\"stage\\\": \\\"\\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Rules
  /api/v2/rules/{id}:
    get:
      tags:
      - Rules
      summary: Get a rule
      description: Retrieves a rule by its ID. Accepts a list of fields to include
        or exclude in the result.
      operationId: apiV2RulesIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Rules
    delete:
      tags:
      - Rules
      summary: Delete a rule
      operationId: apiV2RulesIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Rules
    patch:
      tags:
      - Rules
      summary: Update a rule
      operationId: apiV2RulesIdPATCH
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"script\\\": \\\"\\\",\\r\\n  \\\"name\\\":\
                \ \\\"\\\",\\r\\n  \\\"order\\\": {},\\r\\n  \\\"enabled\\\": true\\\
                r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Rules
  /api/v2/stats/active-users:
    get:
      tags:
      - Stats
      summary: Get active users count
      description: Gets the active users count (logged in during the last 30 days).
      operationId: apiV2StatsActive_usersGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Stats
  /api/v2/stats/daily:
    get:
      tags:
      - Stats
      summary: Get daily stats
      description: Gets the daily stats for a particular period.
      operationId: apiV2StatsDailyGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Stats
  /api/v2/tenants/settings:
    get:
      tags:
      - Tenants
      summary: Get tenant settings
      operationId: apiV2TenantsSettingsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Tenants
    patch:
      tags:
      - Tenants
      summary: Update tenant settings
      operationId: apiV2TenantsSettingsPATCH
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"change_password\\\": {\\r\\n    \\\"enabled\\\
                \": true,\\r\\n    \\\"html\\\": \\\"\\\"\\r\\n  },\\r\\n  \\\"guardian_mfa_page\\\
                \": {\\r\\n    \\\"enabled\\\": true,\\r\\n    \\\"html\\\": \\\"\\\
                \"\\r\\n  },\\r\\n  \\\"error_page\\\": {\\r\\n    \\\"html\\\": \\\
                \"\\\",\\r\\n    \\\"show_log_link\\\": true,\\r\\n    \\\"url\\\"\
                : \\\"\\\"\\r\\n  },\\r\\n  \\\"flags\\\": {\\r\\n    \\\"change_pwd_flow_v1\\\
                \": true,\\r\\n    \\\"enable_client_connections\\\": true,\\r\\n\
                \    \\\"enable_apis_section\\\": true,\\r\\n    \\\"enable_pipeline2\\\
                \": true\\r\\n  },\\r\\n  \\\"friendly_name\\\": \\\"\\\",\\r\\n \
                \ \\\"picture_url\\\": \\\"\\\",\\r\\n  \\\"support_email\\\": \\\"\
                \\\",\\r\\n  \\\"support_url\\\": \\\"\\\",\\r\\n  \\\"allowed_logout_urls\\\
                \": [\\r\\n    \\\"\\\"\\r\\n  ],\\r\\n  \\\"session_lifetime\\\"\
                : 0\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Tenants
  /api/v2/tickets/email-verification:
    post:
      tags:
      - Tickets
      summary: Create an email verification ticket
      operationId: apiV2TicketsEmail_verificationPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"result_url\\\": \\\"\\\",\\r\\n  \\\"user_id\\\
                \": \\\"\\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Tickets
  /api/v2/tickets/password-change:
    post:
      tags:
      - Tickets
      summary: Create a password change ticket
      operationId: apiV2TicketsPassword_changePOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"result_url\\\": \\\"\\\",\\r\\n  \\\"user_id\\\
                \": \\\"\\\",\\r\\n  \\\"new_password\\\": \\\"\\\",\\r\\n  \\\"connection_id\\\
                \": \\\"\\\",\\r\\n  \\\"email\\\": \\\"\\\",\\r\\n  \\\"ttl_sec\\\
                \": 0\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Tickets
  /api/v2/user-blocks:
    get:
      tags:
      - User Blocks
      summary: Get blocks by identifier
      operationId: apiV2User_blocksGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: UserBlocks
    delete:
      tags:
      - User Blocks
      summary: Unblock by identifier
      operationId: apiV2User_blocksDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: UserBlocks
  /api/v2/user-blocks/{id}:
    get:
      tags:
      - User Blocks
      summary: Get a user's blocks
      operationId: apiV2User_blocksIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: UserBlocks
    delete:
      tags:
      - User Blocks
      summary: Unblock a user
      operationId: apiV2User_blocksIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: UserBlocks
  /api/v2/users:
    get:
      tags:
      - Users
      summary: List or search users
      operationId: apiV2UsersGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
    post:
      tags:
      - Users
      summary: Create a user
      description: "Creates a new user according to the JSON object received in <code>body</code>.<br/>\
        \ The samples on the right show you every attribute that could be used. The\
        \ attribute <code>connection</code> is always mandatory but depending on the\
        \ type of connection you are using there could be others too. For instance,\
        \ Auth0 DB Connections require <code>email</code> and <code>password</code>."
      operationId: apiV2UsersPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"connection\\\": \\\"\\\",\\r\\n  \\\"email\\\
                \": \\\"\\\",\\r\\n  \\\"username\\\": \\\"\\\",\\r\\n  \\\"password\\\
                \": \\\"\\\",\\r\\n  \\\"phone_number\\\": \\\"\\\",\\r\\n  \\\"user_metadata\\\
                \": {},\\r\\n  \\\"email_verified\\\": true,\\r\\n  \\\"app_metadata\\\
                \": {}\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
  /api/v2/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: apiV2UsersIdGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: apiV2UsersIdDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
    patch:
      tags:
      - Users
      summary: Update a user
      description: |-
        Updates a user with the object's properties received in the request's body (the object should be a JSON object).<br/>These are the attributes that can be updated at the root level:<ul><li>blocked</li><li>email_verified</li><li>email</li><li>verify_email</li><li>password</li><li>phone_number</li><li>phone_verified</li><li>verify_password</li><li>user_metadata</li><li>app_metadata</li><li>username</li></ul>Some considerations:<ul><li>The properties of the new object will replace the old ones.</li><li>The metadata fields are an exception to this rule (<code>user_metadata</code> and <code>app_metadata</code>). These properties are merged instead of being replaced but be careful, the merge only occurs on the first level.</li><li>If you are updating <code>email_verified</code>, <code>phone_verified</code>, <code>username</code> or <code>password</code> you need to specify the <code>connection</code> property too.</li><li>If your are updating <code>email</code> or <code>phone_number</code> you need to specify the <code>connection</code> and the <code>client_id</code> properties.</ul><h5>Updating a field (non-metadata property)</h5>To mark the email address of a user as verified, the body to send should be:<pre><code>{ "email_verified": true }</code></pre><h5>Updating a user metadata root property</h5>Let's asume that our test user has the following <code>user_metadata</code>:<pre><code>{ "user_metadata" : { "profileCode": 1479 } }</code></pre>To add the field <code>addresses</code> the body to send should be:<pre><code>{ "user_metadata" : { "addresses": {"work_address": "100 Industrial Way"} }}</code></pre>The modified object ends up with the following <code>user_metadata</code> property:<pre><code>{
          "user_metadata": {
            "profileCode": 1479,
            "addresses": { "work_address": "100 Industrial Way" }
          }
        }</code></pre><h5>Updating an inner user metadata property</h5>Starting from previous user metadata, if we want to add the field <code>"home_address": "742 Evergreen Terrace"</code> in <code>addresses</code> we should send the whole addresses object (since this object is on the first level, it will be merged in, but it's own properties won't). The body to send should be:
        <pre><code>{
          "user_metadata": {
            "addresses": {
              "work_address": "100 Industrial Way",
              "home_address": "742 Evergreen Terrace"
            }
          }
        }</code></pre>The modified object ends up with the following <code>user_metadata</code> property:<pre><code>{
          "user_metadata": {
            "profileCode": 1479,
            "addresses": {
              "work_address": "100 Industrial Way",
              "home_address": "742 Evergreen Terrace"
            }
          }
        }</code></pre>
      operationId: apiV2UsersIdPATCH
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"blocked\\\": true,\\r\\n  \\\"email_verified\\\
                \": true,\\r\\n  \\\"email\\\": \\\"\\\",\\r\\n  \\\"verify_email\\\
                \": true,\\r\\n  \\\"phone_number\\\": \\\"\\\",\\r\\n  \\\"phone_verified\\\
                \": true,\\r\\n  \\\"verify_phone_number\\\": true,\\r\\n  \\\"password\\\
                \": \\\"\\\",\\r\\n  \\\"verify_password\\\": true,\\r\\n  \\\"user_metadata\\\
                \": {},\\r\\n  \\\"app_metadata\\\": {},\\r\\n  \\\"connection\\\"\
                : \\\"\\\",\\r\\n  \\\"username\\\": \\\"\\\",\\r\\n  \\\"client_id\\\
                \": \\\"\\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
  /api/v2/users/{user_id}/logs:
    get:
      tags:
      - Users
      summary: Get user's log events
      description: |-
        Retrieve every log event for a specific user id<br/><h5>Event acronym mapping</h5><ul><li>s: Success Login </li><li>seacft: Success Exchange (Authorization Code for Access Token)</li><li>feacft: Failed Exchange (Authorization Code for Access Token)</li><li>seccft: Success Exchange (Client Credentials for Access Token)</li><li>feccft: Failed Exchange (Client Credentials for Access Token)</li><li>f: Failed Login </li><li>w: Warnings During Login </li><li>du: Deleted User </li><li>fu: Failed Login (invalid email/username) </li><li>fp: Failed Login (wrong password) </li><li>fc: Failed by Connector </li><li>fco: Failed by CORS </li><li>con: Connector Online </li><li>coff: Connector Offline </li><li>fcpro: Failed Connector Provisioning </li><li>ss: Success Signup </li><li>fs: Failed Signup </li><li>cs: Code Sent </li><li>cls: Code/Link Sent </li><li>sv: Success Verification Email </li><li>fv: Failed Verification Email </li><li>scp: Success Change Password </li><li>fcp: Failed Change Password </li><li>sce: Success Change Email </li><li>fce: Failed Change Email </li><li>scu: Success Change Username </li><li>fcu: Failed Change Username </li><li>scpn: Success Change Phone Number </li><li>fcpn: Failed Change Phone Number </li><li>svr: Success Verification Email Request </li><li>fvr: Failed Verification Email Request </li><li>scpr: Success Change Password Request </li><li>fcpr: Failed Change Password Request </li><li>fn: Failed Sending Notification </li><li>sapi: API Operation </li><li>fapi: Failed API Operation </li><li>limit_wc: Blocked Account </li><li>limit_mu: Blocked IP Address </li><li>limit_ui: Too Many Calls to /userinfo </li><li>api_limit: Rate Limit On API </li><li>sdu: Successful User Deletion </li><li>fdu: Failed User Deletion </li><li>slo: Success Logout</li><li>flo: Failed Logout</li><li>sd: Success Delegation</li><li>fd: Failed Delegation</li></ul>
        <h5>List of fields that can be used in fields and sort</h5><ul><li>date: The moment when the event occured.</li><li>connection: The connection related to the event.</li><li>client_id: The client id related to the event</li><li>client_name: The name of the client related to the event.</li><li>ip: The IP address from where the request that caused the log entry originated.</li><li>user_id: The user id related to the event.</li><li>user_name: The user name related to the event.</li><li>description: The description of the event.</li><li>user_agent: The user agent that is related to the event.</li><li>type: The event type. Refer to the event acronym mappings above for a list of possible event types.</li><li>details: The details object of the event.</li><li>strategy: The connection strategy related to the event.</li><li>strategy_type: The connection strategy type related to the event.</li></ul>
      operationId: apiV2UsersUser_idLogsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
  /api/v2/users/{id}/enrollments:
    get:
      tags:
      - Users
      summary: Get a list of Guardian enrollments
      description: Retrieves all Guardian enrollments.
      operationId: apiV2UsersIdEnrollmentsGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
  /api/v2/users/{id}/multifactor/{provider}:
    delete:
      tags:
      - Users
      summary: Delete a user's multifactor provider
      operationId: apiV2UsersIdMultifactorProviderDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: provider
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
  /api/v2/users/{id}/identities/{provider}/{user_id}:
    delete:
      tags:
      - Users
      summary: Unlink a user identity
      description: |
        Unlinks an identity from the target user, and it becomes a separated user again.
      operationId: apiV2UsersIdIdentitiesProviderUser_idDELETE
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: provider
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user_id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
  /api/v2/users/{id}/recovery-code-regeneration:
    post:
      tags:
      - Users
      summary: "Removes the current recovery token, generates and returns a new one"
      operationId: apiV2UsersIdRecovery_code_regenerationPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: '""'
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
  /api/v2/users/{id}/identities:
    post:
      tags:
      - Users
      summary: Link a user account
      description: |-
        Links the account specified in the body (<strong>secondary account</strong>) to the account specified by the <code>id</code> param of the URL (<strong>primary account</strong>).<br>There are two ways of invoking the endpoint:<br><ul><li>With the authenticated primary account's JWT in the Authorization header, which has the <code>update:current_user_identities</code> scope:
        <pre>
        POST /api/v2/users/PRIMARY_ACCOUNT_USER_ID/identities
        Authorization: "Bearer PRIMARY_ACCOUNT_JWT"
        {
          "link_with": "SECONDARY_ACCOUNT_JWT"
        }
        </pre>In this case only the <code>link_with</code> param is required in the body, containing the JWT obtained upon the secondary account's authentication.</li><li>With an API V2 generated token with <code>update:users</code> scope:
        <pre>
        POST /api/v2/users/PRIMARY_ACCOUNT_USER_ID/identities
        Authorization: "Bearer YOUR_API_V2_TOKEN"
        {
          "provider": "SECONDARY_ACCOUNT_PROVIDER",
          "connection_id": "SECONDARY_ACCOUNT_CONNECTION_ID(OPTIONAL)",
          "user_id": "SECONDARY_ACCOUNT_USER_ID"
        }
        </pre>In this case you need to send <code>provider</code> and <code>user_id</code> in the body. Optionally you can also send the <code>connection_id</code> param which is suitable for identifying a particular database connection for the 'auth0' provider.</li></ul>On successful linking, the endpoint returns the new array of the primary account identities.
      operationId: apiV2UsersIdIdentitiesPOST
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: Content-Type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: application/json
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: "\"{\\r\\n  \\\"provider\\\": \\\"\\\",\\r\\n  \\\"connection_id\\\
                \": \\\"\\\",\\r\\n  \\\"user_id\\\": \\\"\\\",\\r\\n  \\\"link_with\\\
                \": \\\"\\\"\\r\\n}\""
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: Users
  /api/v2/users-by-email:
    get:
      tags:
      - Users By Email
      summary: Search users by email
      description: |-
        If Auth0 is the identify provider (idP), the email address associated with a user is saved in lower case, regardless of how you initially provided it. For example, if you register a user as **JohnSmith@example.com**, Auth0 saves the user's email as **johnsmith@example.com**.

        In cases where Auth0 is not the idP, the `email` is stored based on the rules of idP, so make sure the search is made using the correct capitalization.

        When using this endpoint, make sure that you are searching for users via email addresses using the correct case.
      operationId: apiV2Users_by_emailGET
      parameters:
      - name: Authorization
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
        example: "Bearer {{auth0_token}}"
      - name: email
        in: query
        description: Email address to search for
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
      x-swagger-router-controller: UsersByEmail
components: {}
